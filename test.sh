#!/bin/sh

#for file in `\find . -maxdepth 2 -type f`; do
#echo $file >> out
#done

test=AAA
echo test
echo $test

read ttt
echo $ttt

read -p "Year  :" YYYY
read -p "Month :" MM
read -p "Day   :" DD
echo "-----------"
echo $YYYY
echo $DD
echo $MM

#変数と文字列を連結した文字列でコマンドとしてプロンプトが受け付けてくれるか。
echo ${YYYY}_${MM}_${DD}_tcp_port_scan.txt

#ユーザからのy or nの入力待ち
#ここでの条件は「testという変数にAAAという文字列が格納されているか」
if [ $test = "AAA" ]; then
  read -p "ok? (y/N): " yn
  case "$yn" in [yY]*) ;; *) echo "abort." ; exit ;; esac

  test=BBB
  echo $test

  #コマンドが正常終了したか
  if [ $? = 0 ]; then
    echo "echoは正常終了"
  else
    echo "echoは異常終了"
  fi

fi

#sudo 付きでコマンド載せてるけど大丈夫？
#nmapとはいえプロンプトの見た目変えなくていい？

#UDPはウェルノウンポート優先であることを明記する。

#シェルスクリプトって変数とかの文字列はクオーテーションの有無を気にしないのか。
#だったら「特定の文字列にマッチさせたいとき」とかで文字列をここに書きたいときは明示的にユーザ側ですればいいのか。

#$?は直前のコマンドの終了ステータスコードのみ保持しているので判定したいコマンドとif文の間で別のコマンドの実行をする場合には一度変数に$?の内容を保持しておく

#TCP、UDP、ポート、サービス、のどのシェルスクリプトを実行するかはユーザに委ねて、
#ユーザが調べたいURL(URL)、
#ユーザから-oNのオプションとして出力してほしいテキストのName(会社名)、YYYY(year)、MM(month)、DD(day)、(もしくはName_YYYY_MM_DDをユーザから受け取るとしてName_Dateとか)の入力を受け取って

#rootのフォルダにいて診断用コマンド打たない？
#ってことはそのフォルダにいるかどうかを判断して、rootフォルダ内だったら普通ユーザのフォルダ内とか、所望のフォルダに向けてテキストを移すかコピーするかする？
#rootフォルダにいずにsudoで打ちたいときは？

#オプションは引数として持たせたくない。
#もしくは「TCPのポートスキャンを実行するこのスクリプトのデフォルトのオプションは〇〇です。追加したいオプションはありますか？」
#みたいにしたい。

#オプションとか、オプションで指定するポートについて格納できるようにバッファとして予め10個くらい変数用意しておくしかできない。
#コマンド打つ前に動的に新しく引数を増やせない。

#「
#URL------:AAA
#folder---:BBB/CCC/
#log_name-:DDD.txt
#この内容でコマンドを打ちますか？
#ok? (y/N): y
#」
#みたいなメッセージが表示されてy or nって確認してから実行されるみたいなスクリプトにしたい

#コマンドが終わったら「良い診断生活を！Bye！」
#「このコマンドは打ち終わったけど、TCP、UDP、ポート、サービスのほかの種類の診断漏れはない？」みたいな。
#「高名な診断士よ。コマンドの終わりに言葉を聞いておくれ」
#ok? (y/N): y
#「〇〇」
#ok? (y/N): n
#「ケチな診断士だな。ポート閉じるぞ！」
#本当に閉じるコマンドを書いても面白い。
#メッセージ機能は必要に応じてオンオフ切り替えられるようにする。
#忙しい時にターミナルに説法されてもイラつくだけ。
#コマンドが終わったらランダムにメッセージが出るようにしたい。
#テキストを配列に入れておいて
#乱数を生成して配列の番号に指定する。ramdom=i; echo message[i]みたいな。

#電子の海に還れ

#ペイロードという船に乗ってサーバーという約束の地に向かうパケット
#-名も無きビット

#TCP:「今お時間いいですか？」
#    「こういう話したいです。」
#...

#UDP:「時間いいよねこういう話するよへぇ時間なかったんだ知らないよそれでね...」

#暗号のジョークとか。

#聖書の章と節がコロンで分けられているから、16進数でそれを表す。0A:3E:7F みたいな。

#理系がわかるジョーク、ブラックユーモア

#関係ないけど、自分でインタラクティブにユーザとやりとりして内容を書き換えられるセルフホストなファイルって作れない？

#gitに上げているのを実のファイルにして、PATHを通した/bin/以下のファイルをシンボリックリンクにするか。

#"シェバン！"とか"shebang"って打ったら#!/bin/shって出るスニペットが欲しい。本当なら"シェ！"だけど。

#nmap本来の時間経過を邪魔しないようなプログレスバーとか書けない？

#コマンドを打った時にレオンのマークのAAが出てくる。
#Before you run this shell scrypt, you must talk with your leader.
#「社内ツールにつき、まず以って社員の確認を取られたし。」

#GitHubに上げた。
#ジョーク版のコマンドと、そうでない真面目なコマンドにブランチを分ける？
#ここでgitのフォークとかマスターしてよ。

#コマンドとコマンドの切れ目に、シェルスクリプトとしての途中経過を表示させたい。

#別のシェルスクリプトから他のシェルスクリプトを呼び出せない？

#コンフリクトは起こさない前提。マージとかでうまくファイルの差分が解決するわけでなく、そもそもコンフリクトを起こさないようなタスク管理が必要。
#コンフリクトは結局ミニマルなマニュアルのマージ(手マージ)で解決するほかない。